service: autostat

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    NODE_ENV: ${self:provider.stage}
    DB_HOST: ${self:custom.environment.${self:provider.stage}.DB_HOST}
    DB_USER: ${self:custom.environment.${self:provider.stage}.DB_USER}
    DB_PASSWORD: ${self:custom.environment.${self:provider.stage}.DB_PASSWORD}
    DB_NAME: ${self:custom.environment.${self:provider.stage}.DB_NAME}
    DB_PORT: ${self:custom.environment.${self:provider.stage}.DB_PORT}
    JWT_SECRET: ${self:custom.environment.${self:provider.stage}.JWT_SECRET}
    FRONTEND_URL: ${self:custom.environment.${self:provider.stage}.FRONTEND_URL}
    CORS_ALLOWED_ORIGINS: ${self:custom.environment.${self:provider.stage}.CORS_ALLOWED_ORIGINS}
  vpc:
    securityGroupIds:
      - ${ssm:'/autostat/dev/vpc/securityGroupId'}
    subnetIds:
      - ${ssm:'/autostat/dev/vpc/subnetId1'}
      - ${ssm:'/autostat/dev/vpc/subnetId2'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource: 
            - arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/autostat/*
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:AssignPrivateIpAddresses
            - ec2:UnassignPrivateIpAddresses
          Resource: "*"

functions:
  api:
    handler: dist/lambda.handler
    events:
      - http:
          path: /health
          method: GET
          cors:
            origins:
              - http://localhost:5173
              - http://autostat-frontend-dev.s3-website-us-east-1.amazonaws.com
              - https://autostat.app
              - https://d26x71430m93jn.cloudfront.net
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Credentials
            allowCredentials: true
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origins:
              - http://localhost:5173
              - http://autostat-frontend-dev.s3-website-us-east-1.amazonaws.com
              - https://autostat.app
              - https://d26x71430m93jn.cloudfront.net
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Credentials
            allowCredentials: true
    timeout: 60
    memorySize: 1024

package:
  patterns:
    - '!**'
    - 'dist/**'

plugins:
  - serverless-plugin-typescript
  - serverless-domain-manager

custom:
  customDomain:
    domainName: api.autostat.app
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: regional
    securityPolicy: tls_1_2
    apiType: rest
    autoDomain: true
  environment:
    local: ${file(./config/local.env.json)}
    dev:
      DB_HOST: ${ssm:'/autostat/dev/db/host'}
      DB_USER: ${ssm:'/autostat/dev/db/user'}
      DB_PASSWORD: ${ssm:'/autostat/dev/db/password'}
      DB_NAME: ${ssm:'/autostat/dev/db/name'}
      DB_PORT: ${ssm:'/autostat/dev/db/port'}
      JWT_SECRET: ${ssm:'/autostat/dev/jwt/secret'}
      FRONTEND_URL: ${ssm:'/autostat/dev/frontend/url'}
      CORS_ALLOWED_ORIGINS: ${ssm:'/autostat/dev/cors/allowed_origins'}
  serverless-offline:
    httpPort: 3000
    host: localhost
    noPrependStageInUrl: true
    allowCache: false
    keepAlive: true
    lambdaTimeout: 60
  cors:
    origins: ${self:custom.environment.${self:provider.stage}.CORS_ALLOWED_ORIGINS}
    headers:
      - Content-Type
      - Authorization
      - X-Amz-Date
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
    methods:
      - GET
      - POST
      - PUT
      - DELETE
      - OPTIONS
  serverlessPluginTypescript:
    tsConfigFileLocation: './tsconfig.json'

resources:
  Outputs:
    ApiId:
      Description: "API Gateway ID"
      Value: 
        Ref: ApiGatewayRestApi
      Export:
        Name: autostat-api-id 
